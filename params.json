{"name":"React-haskell","tagline":"React bindings for Haskell","body":"# React-Haskell [![Hackage](https://img.shields.io/hackage/v/react-haskell.svg?style=flat-square)](https://hackage.haskell.org/package/react-haskell)\r\n\r\nAs crazy as it seems, using [React](http://facebook.github.io/react) and [Haskell](https://www.haskell.org) together just *may* be a good idea.\r\n\r\nI was driven to create this thing because I had a large existing Haskell codebase I wanted to put online. However, even without existing code, I think a lot of problems are better modeled in Haskell than JavaScript or  other languages. Or you might want to use some existing Haskell libraries.\r\n\r\n## Examples\r\n\r\nLet's put a simple paragraph on the page:\r\n\r\n```haskell\r\nsample :: React () ()\r\nsample = p_ [ class_ \"style\" ] $ em_ \"Andy Warhol\"\r\n\r\nmain :: IO ()\r\nmain = do\r\n    Just elem <- elemById \"id\"\r\n    render elem sample\r\n```\r\n\r\nThat creates a DOM node on the page that looks like:\r\n\r\n```html\r\n<p class=\"style\">\r\n    <em>Andy Warhol</em>\r\n</p>\r\n```\r\n\r\nWe can make that a little more complicated with some more child nodes.\r\n\r\n```haskell\r\nsample :: React () ()\r\nsample = div_ [ class_ \"beautify\" ] $ do\r\n    \"The Velvet Underground\"\r\n\r\n    input_\r\n\r\n    \"Lou Reed\"\r\n```\r\n\r\nBut of course that input doesn't do anything. Let's change that.\r\n\r\n```haskell\r\nsample :: JSString -> React AppKey ()\r\nsample str = div_ $ do\r\n    \"Favorite artist:\"\r\n\r\n    input_ [ onChange (Just . value . target) ]\r\n\r\n    text str\r\n```\r\n\r\n## Additional Resources\r\n\r\n* [Animating Web UI with React and Haskell](http://joelburget.com/react-haskell) (article)\r\n* [Writing a React JS front-end in Haskell](http://begriffs.com/posts/2015-01-12-reactjs-in-haskell.html) (video)\r\n\r\n## Getting Started\r\n\r\nThe first step is a working GHCJS installation. The easiest way is to download a virtual machine with GHCJS pre-installed. I recommend <a href=\"https://github.com/joelburget/ghcjs-box\">ghcjs-box</a>.\r\n\r\nNow that GHCJS is installed we can use cabal to create a project.\r\n\r\n```bash\r\n$ mkdir project\r\n$ cd project\r\n$ cabal init # generate a .cabal file\r\n```\r\nNow edit the cabal file to include dependencies.\r\n\r\n```cabal\r\nbuild-depends:\r\n  base >= 4.8 && < 5,\r\n  ghcjs-base,\r\n  ghcjs-dom,\r\n  react-haskell >= 1.3\r\n```\r\nNow we can write `Main.hs`.\r\n\r\n```haskell\r\nsample :: React () ()\r\nsample = p_ [ class_ \"style\" ] $ em_ \"Andy Warhol\"\r\n\r\nmain :: IO ()\r\nmain = do\r\n    Just elem <- elemById \"id\"\r\n    render elem sample\r\n```\r\n\r\n## Is it Right for Me?\r\n\r\nReact-Haskell is a great tool for building web UI from Haskell. However, you may want to consider the alternatives:\r\n\r\n* By writing plain React / JSX you can speed development by avoiding the GHCJS compilation step. This also has the advantage of being a bit more universal - more people use React through JSX than React-Haskell.\r\n* [ghcjs-react](https://github.com/fpco/ghcjs-react) is a very similar project.\r\n* [Reflex](https://github.com/ryantrinkle/try-reflex) is an FRP system built with GHCJS in mind.\r\n\r\n## Small Print\r\n\r\n[MIT License](http://opensource.org/licenses/MIT)\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/joelburget/react-haskell/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}